@page "/kanban"
@using Microsoft.AspNetCore.Components.Web

<style>
    /* Contenitore della board con scroll orizzontale */
    .kanban-container {
        overflow-x: auto;
        white-space: nowrap;
        padding-bottom: 10px; /* per non coprire la scrollbar */
    }

    .trello-column h5 {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        margin: 0;
        padding: 0 5px;
    }

    /* Stile per ciascuna colonna */
    .trello-column {
        display: inline-block; /* affianca le colonne */
        vertical-align: top;
        width: 200px; /* larghezza fissa, regolabile */
        padding: 10px;
        border-radius: 5px;
        min-height: 400px;
        margin-right: 10px; /* spazio fra le colonne */
    }

    .trello-column-red {
        background-color: #d3dbe9;
    }

    .trello-column-yellow {
        background-color: #d3dbe9;
    }

    .trello-column-blue {
        background-color: #d3dbe9;
    }

    .trello-column-green {
        background-color: #d3dbe9;
    }

    /* Stile per le card */
    .trello-card {
        background-color: #ffffff;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        cursor: move;
    }
</style>

<div class="container">
    <h2 class="page-title">Projects/Payments Status</h2>
    <div class="kanban-container">
        <!-- Colonna 1: Proposta Commerciale -->
        <div class="trello-column trello-column-yellow"
             @ondrop="HandleDropProposta"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Proposta Commerciale</h5><br />
            @foreach (var card in PropostaCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 2: Inizio Progetto -->
        <div class="trello-column trello-column-yellow"
             @ondrop="HandleDropInizio"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Inizio Progetto</h5><br />
            @foreach (var card in InizioCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 3: Ritardo (Inizio) -->
        <div class="trello-column trello-column-red"
             @ondrop="HandleDropRitardoInizio"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5 style="color:orangered; font-weight:bold;">Ritardo (Inizio)</h5><br />
            @foreach (var card in RitardoInizioCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 4: Conclusione con Pagamento -->
        <div class="trello-column trello-column-blue"
             @ondrop="HandleDropConclusione"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Conclusione con Pagamento</h5><br />
            @foreach (var card in ConclusioneCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 5: Ritardo (Pagamento) -->
        <div class="trello-column trello-column-red"
             @ondrop="HandleDropRitardoPagamento"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5 style="color:orangered; font-weight:bold;">Ritardo (Pagamento)</h5><br />
            @foreach (var card in RitardoPagamentoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 6: Pagamento Ricevuto -->
        <div class="trello-column trello-column-green"
             @ondrop="HandleDropPagamentoRicevuto"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5 style="color:limegreen; font-weight:bold;">Pagamento Ricevuto</h5><br />
            @foreach (var card in PagamentoRicevutoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    public class CardItem
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
    }

    // Liste per le colonne
    private List<CardItem> PropostaCards = new();
    private List<CardItem> InizioCards = new();
    private List<CardItem> RitardoInizioCards = new();
    private List<CardItem> ConclusioneCards = new();
    private List<CardItem> RitardoPagamentoCards = new();
    private List<CardItem> PagamentoRicevutoCards = new();

    // Variabile per tracciare la card trascinata
    private CardItem draggedCard;

    protected override void OnInitialized()
    {
        // Dati mockup
        PropostaCards.Add(new CardItem { Id = 1, Title = "Progetto A", Description = "Proposta inviata" });
        PropostaCards.Add(new CardItem { Id = 2, Title = "Progetto B", Description = "Proposta in attesa" });
        InizioCards.Add(new CardItem { Id = 3, Title = "Progetto C", Description = "Progetto iniziato" });
        RitardoInizioCards.Add(new CardItem { Id = 4, Title = "Progetto D", Description = "Ritardo nell'inizio" });
        ConclusioneCards.Add(new CardItem { Id = 5, Title = "Progetto E", Description = "Conclusione in corso" });
        RitardoPagamentoCards.Add(new CardItem { Id = 6, Title = "Progetto F", Description = "Pagamento in ritardo" });
        PagamentoRicevutoCards.Add(new CardItem { Id = 7, Title = "Progetto G", Description = "Pagamento completato" });
    }

    private void OnDragStart(DragEventArgs e, CardItem card)
    {
        draggedCard = card;
    }

    private void OnDragOver(DragEventArgs e)
    {
        // Il modificatore :preventDefault sull'elemento impedisce il comportamento predefinito
    }

    // Gestori di drop per ciascuna colonna
    private void HandleDropProposta(DragEventArgs e) => OnDrop("Proposta");
    private void HandleDropInizio(DragEventArgs e) => OnDrop("Inizio");
    private void HandleDropRitardoInizio(DragEventArgs e) => OnDrop("RitardoInizio");
    private void HandleDropConclusione(DragEventArgs e) => OnDrop("Conclusione");
    private void HandleDropRitardoPagamento(DragEventArgs e) => OnDrop("RitardoPagamento");
    private void HandleDropPagamentoRicevuto(DragEventArgs e) => OnDrop("PagamentoRicevuto");

    private void OnDrop(string targetColumn)
    {
        if (draggedCard == null)
            return;

        // Rimuovo la card da tutte le colonne
        PropostaCards.Remove(draggedCard);
        InizioCards.Remove(draggedCard);
        RitardoInizioCards.Remove(draggedCard);
        ConclusioneCards.Remove(draggedCard);
        RitardoPagamentoCards.Remove(draggedCard);
        PagamentoRicevutoCards.Remove(draggedCard);

        // Aggiungo la card alla colonna di destinazione
        switch (targetColumn)
        {
            case "Proposta":
                PropostaCards.Add(draggedCard);
                break;
            case "Inizio":
                InizioCards.Add(draggedCard);
                break;
            case "RitardoInizio":
                RitardoInizioCards.Add(draggedCard);
                break;
            case "Conclusione":
                ConclusioneCards.Add(draggedCard);
                break;
            case "RitardoPagamento":
                RitardoPagamentoCards.Add(draggedCard);
                break;
            case "PagamentoRicevuto":
                PagamentoRicevutoCards.Add(draggedCard);
                break;
        }

        draggedCard = null;
        StateHasChanged();
    }
}
