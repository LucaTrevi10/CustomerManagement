@page "/projects"

@using Blazored.LocalStorage
@using CustomerUI.Models
@using CustomerUI.Models.Dtos
@using CustomerUI.Services
@using ClosedXML.Excel
@inject ProjectService ProjectService
@inject CustomerService CustomerService 
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<link href="Payments.css" rel="stylesheet">
<script src="js/downloadHelper.js"></script>

<h2 class="page-title">Projects</h2>

<div class="filters">
    <div>      
        <input type="text" @bind="filterProjectName" class="form-control rounded-pill px-3 py-2" placeholder="Cerca per nome progetto" />
    </div>
    <div>   
        <input type="text" @bind="filterCompanyName" class="form-control rounded-pill px-3 py-2" placeholder="Cerca per nome cliente" />
    </div>
    <div>      
        <input type="date" class="form-control rounded-pill px-3 py-2" @bind="filterDateFrom" />
    </div>
    <div>       
        <input type="date" class="form-control rounded-pill px-3 py-2" @bind="filterDateTo" />
    </div>
    <div>
        <button @onclick="ApplyFilter" class="btn btn-primary rounded-pill px-3 py-2"><i class="fas fa-filter"></i> Apply Filters</button>
        <button @onclick="ClearFilter" class="btn btn-secondary rounded-pill px-3 py-2"><i class="fas fa-times-circle"></i> Clear Filters</button>
        <button class="btn btn-primary rounded-pill px-3 py-2" @onclick="OpenAddProjectModal">
            <i class="fas fa-plus"></i> Add Project
        </button>
        <button class="btn btn-success rounded-pill px-3 py-2" @onclick="ExportToExcel">
            <i class="fas fa-file-excel"></i> Export
        </button>
    </div>
</div>

@if (projects == null)
{
    <p>Caricamento in corso...</p>
}
else
{
    <table class="table styled-table">
        <thead>
            <tr>
                <th>Project Name</th>
                <th>Company Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Payment Due Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.ProjectName</td>
                    <td>@project.CompanyName</td>
                    <td>@project.StartDate.ToString("yyyy-MM-dd")</td>
                    <td>@(project.EndDate.HasValue ? project.EndDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                    <td>@project.PaymentDueDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-primary rounded-pill px-3 py-2" @onclick="() => ShowEditModal(project)"><i class="fas fa-edit"></i> Edit</button>
                        <button class="btn btn-danger rounded-pill px-3 py-2" @onclick="() => DeleteProject(project.ProjectId)"><i class="fas fa-trash"></i> Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal per aggiungere un nuovo cliente -->
@if (IsAddModalOpen)
{
    <div class="modal-backdrop" @onclick="CloseAddModal">
        <div class="modal" @onclick:stopPropagation>
            <h3>Add New Project</h3>

            <div>
                <label for="ProjectName" class="form-label">Project Name</label>
                <input type="text" id="ProjectName" class="form-control rounded-pill px-3 py-2" @bind="newProject.ProjectName" />
            </div>

            <div>
                <label for="CustomerId" class="form-label">Customer</label>
                <select id="CustomerId" class="form-control rounded-pill px-3 py-2" @bind="newProject.CustomerId">
                    <option value="">-- Select a Customer --</option>
                    @foreach (var customer in customers)
                    {
                        <option value="@customer.CustomerId">@customer.CompanyName</option>
                    }
                </select>
            </div>

            <div>
                <label for="StartDate" class="form-label">Start Date</label>
                <input type="date" id="StartDate" class="form-control rounded-pill px-3 py-2" @bind="newProject.StartDate" />
            </div>

            <div>
                <label for="EndDate" class="form-label">End Date</label>
                <input type="date" id="EndDate" class="form-control rounded-pill px-3 py-2" @bind="newProject.EndDate" />
            </div>

            <div>
                <label for="PaymentDueDate" class="form-label">Payment Due Date</label>
                <input type="date" id="PaymentDueDate" class="form-control rounded-pill px-3 py-2" @bind="newProject.PaymentDueDate" />
            </div>

            <div>
                <button type="button" class="btn btn-secondary rounded-pill px-4 py-2" @onclick="CloseAddModal">
                    <i class="fas fa-times-circle"></i> Cancel
                </button>
                <button type="button" class="btn btn-primary rounded-pill px-4 py-2" @onclick="AddProjectAsync">
                    <i class="fa-regular fa-floppy-disk"></i> Save
                </button>
            </div>
        </div>
    </div>
}


<!-- Modale per modifica -->
@if (isEditModalVisible)
{
    <div class="modal-backdrop" @onclick="CancelEdit">
        <div class="modal" @onclick:stopPropagation>
            @*  <h3>Modifica Progetto</h3> *@
            <div>
                <label>Nome Progetto:</label>
                <input type="text" @bind="editingProject.ProjectName" />
            </div>
            <div>
                <label>Nome Cliente:</label>
                <input type="text" @bind="editingProject.CompanyName" />
            </div>
            <div>
                <label>Data Inizio:</label>
                <input type="date" @bind="editingProject.StartDate" />
            </div>
            <div>
                <label>Data Fine:</label>
                <input type="date" @bind="editingProject.EndDate" />
            </div>
            <div>
                <label>Data Scadenza Pagamento:</label>
                <input type="date" @bind="editingProject.PaymentDueDate" />
            </div>
            <div>
                <button type="button" class="btn btn-secondary rounded-pill px-4 py-2" @onclick="SaveProject"><i class="fa-regular fa-floppy-disk"></i>Save</button>
                <button type="button" class="btn btn-primary rounded-pill px-4 py-2" @onclick="CancelEdit"><i class="fas fa-times-circle"></i> Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private List<ProjectDto>? projects;
    private List<ProjectDto>? allProjects; // Per tenere traccia di tutti i progetti
    private List<CustomerUI.Models.Customer>? customers; // Lista clienti

    // Filtri
    private string filterProjectName = string.Empty;
    private string filterCompanyName = string.Empty;
    private DateOnly? filterDateFrom;
    private DateOnly? filterDateTo;

    // Stato del modale
    private bool isEditModalVisible = false;
    private bool IsAddModalOpen = false;
    private ProjectDto? editingProject;
    private Project? newProject;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("token");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return; // Evita di eseguire il resto del codice se il token non è valido
        }
        allProjects = await ProjectService.GetProjectsAsync();
        projects = allProjects;
        customers = await CustomerService.GetCustomersAsync(); // Carica i clienti
    }

    private void ApplyFilter()
    {
        projects = allProjects
            .Where(p =>
                (string.IsNullOrEmpty(filterProjectName) || p.ProjectName.Contains(filterProjectName, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(filterCompanyName) || p.CompanyName.Contains(filterCompanyName, StringComparison.OrdinalIgnoreCase)) &&
                (!filterDateFrom.HasValue || p.PaymentDueDate >= filterDateFrom) &&
                (!filterDateTo.HasValue || p.PaymentDueDate <= filterDateTo)
            ).ToList();
    }

    private void ClearFilter()
    {
        filterProjectName = string.Empty;
        filterCompanyName = string.Empty;
        filterDateFrom = null;
        filterDateTo = null;
        projects = allProjects;
    }

    private void ShowEditModal(ProjectDto project)
    {
        Console.WriteLine("Apertura modale"); // Log per debugging
        editingProject = new ProjectDto
            {
                ProjectId = project.ProjectId,
                ProjectName = project.ProjectName,
                CompanyName = project.CompanyName,
                StartDate = project.StartDate,
                EndDate = project.EndDate,
                PaymentDueDate = project.PaymentDueDate,
                CustomerId = project.CustomerId
            };
        isEditModalVisible = true;
    }

    private async Task SaveProject()
    {
        if (editingProject != null)
        {
            // Converti ProjectDto in Project
            var project = new Project
                {
                    ProjectId = editingProject.ProjectId,
                    ProjectName = editingProject.ProjectName,
                    CustomerId = editingProject.CustomerId,
                    StartDate = editingProject.StartDate,
                    EndDate = editingProject.EndDate.HasValue ? editingProject.EndDate.Value : null,
                    PaymentDueDate = editingProject.PaymentDueDate,
                    Customer = null
                };

            await ProjectService.UpdateProjectAsync(project.ProjectId, project);
            allProjects = await ProjectService.GetProjectsAsync();
            projects = allProjects;
        }
        isEditModalVisible = false;
    }

    private void CancelEdit()
    {
        isEditModalVisible = false;
        editingProject = null;
    }

    private async Task DeleteProject(int id)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this Project?");

        if (confirmDelete)
        { 
            try
            {
                await ProjectService.DeleteProjectAsync(id);
                allProjects = await ProjectService.GetProjectsAsync();
                projects = allProjects; // Aggiorna l'elenco
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
        
    }

    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Customers");

        worksheet.Cell(1, 1).Value = "Project Name";
        worksheet.Cell(1, 2).Value = "Company Name";
        worksheet.Cell(1, 3).Value = "Start Date";
        worksheet.Cell(1, 4).Value = "End Date";
        worksheet.Cell(1, 5).Value = "Payment Due Date";        

        int row = 2;
        foreach (var proj in projects)
        {
            worksheet.Cell(row, 1).Value = proj.ProjectName;
            worksheet.Cell(row, 2).Value = proj.CompanyName;
            worksheet.Cell(row, 3).Value = proj.StartDate.ToString();
            worksheet.Cell(row, 4).Value = proj.EndDate.ToString();
            worksheet.Cell(row, 5).Value = proj.PaymentDueDate.ToString();
            row++;
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Position = 0;

        var fileName = "Projects.xlsx";
        var fileBytes = stream.ToArray();
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, fileBytes);
    }

    private void OpenAddProjectModal()
    {
        newProject = new Project
            {
                StartDate = DateOnly.FromDateTime(DateTime.Today),
                PaymentDueDate = DateOnly.FromDateTime(DateTime.Today.AddDays(30)), // Default a 30 giorni
                CustomerId = 1 // Imposta un valore di default, oppure gestisci la selezione del cliente
            };
        IsAddModalOpen = true;
    }


    // Chiudi la modal
    private void CloseAddModal()
    {
        IsAddModalOpen = false;
    }

    private async Task AddProjectAsync()
    {
        try
        {
            if (newProject != null && newProject.CustomerId > 0)
            {  
                await ProjectService.CreateProjectAsync(newProject);
                allProjects = await ProjectService.GetProjectsAsync();
                projects = allProjects;
                CloseAddModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore durante la creazione del progetto: {ex.Message}");
        }
    }

}
