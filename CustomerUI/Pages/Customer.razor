@page "/customers"
@using Blazored.LocalStorage
@using CustomerUI.Services
@inject CustomerService CustomerService
@using ClosedXML.Excel
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization


<link href="Payments.css" rel="stylesheet">

<h2 class="page-title">Customers</h2>

<!-- Filtri -->
<div class="filters">
    <div>
        <input 
        @bind="CompanyNameFilter" 
        placeholder="Filter by Company Name"
        class="form-control rounded-pill px-3 py-2" />
    </div>
    <div>
        <input 
        @bind="EmailFilter" 
        placeholder="Filter by Email"
        class="form-control rounded-pill px-3 py-2" />
    </div>
    <div>
        <select 
        @bind="IsActiveFilter"
                class="form-select rounded-pill px-3 py-2" style="width: 220px !important;">
            <option value="">All</option>
            <option value="true">Active</option>
            <option value="false">Inactive</option>
        </select>
    </div>
    <div>
        <button @onclick="ApplyFilters" class="btn btn-primary rounded-pill px-3 py-2">
            <i class="fas fa-filter"></i> Apply Filters
        </button>
        <button @onclick="ClearFilters" class="btn btn-secondary rounded-pill px-3 py-2">
            <i class="fas fa-times-circle"></i> Clear Filters
        </button>
        <button class="btn btn-primary rounded-pill px-3 py-2" @onclick="OpenAddCustomerModal">
            <i class="fas fa-plus"></i> Add Customer
        </button>
        <button class="btn btn-success rounded-pill px-3 py-2" @onclick="ExportToExcel">
            <i class="fas fa-file-excel"></i> Export
        </button>
    </div>
</div>

<div class="container mt-4">

    @if (isLoading)
    {
        <p>Loading customers...</p>
    }
    else if (!customers.Any())
    {
        <p>No customers found.</p>
    }
    else
    {
        <table class="table styled-table">
            <thead>
                <tr>
                    <th>Company Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>Active</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in FilteredCustomers)
                {
                    <tr>
                        <td>@customer.CompanyName</td>
                        <td>@customer.Email</td>
                        <td>@customer.Phone</td>
                        <td>@customer.Address</td>
                        <td>@customer.City</td>
                        <td>@(customer.IsActive ? "Yes" : "No")</td>
                        <td>
                            <button class="btn btn-info rounded-pill px-3 py-2" @onclick="() => NavigateToJourney(customer.CustomerId, customer.CompanyName)">
                                <i class="fas fa-eye"></i> View
                            </button>
                            <button class="btn btn-primary rounded-pill px-3 py-2" @onclick="() => OpenEditModal(customer)">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-danger rounded-pill px-3 py-2" @onclick="() => OnDeleteClicked(customer.CustomerId)">
                                <i class="fas fa-trash"></i> Delete
                            </button>

                        </td>                        
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


<!-- Modal per aggiungere un nuovo cliente -->
@if (IsAddCustomerModalOpen)
{
    <div class="modal-backdrop" @onclick="CloseAddCustomerModal">
        <div class="modal" @onclick:stopPropagation>
            <h3>Add New Customer</h3>
            <div>
                <label for="customerName" class="form-label">Name</label>
                <input type="text" id="customerName" class="form-control rounded-pill px-3 py-2" @bind="NewCustomer.CompanyName" />
            </div>
            <div>
                <label for="customerEmail" class="form-label">Email</label>
                <input type="email" id="customerEmail" class="form-control rounded-pill px-3 py-2" @bind="NewCustomer.Email" />
            </div>
            <div>
                <label for="Phone" class="form-label">Phone</label>
                <input type="text" id="Phone" class="form-control rounded-pill px-3 py-2" @bind="NewCustomer.Phone" />
            </div>
            <div>
                <label for="Address" class="form-label">Address</label>
                <input type="text" id="Address" class="form-control rounded-pill px-3 py-2" @bind="NewCustomer.Address" />
            </div>
            <div>
                <label for="City" class="form-label">City</label>
                <input type="text" id="City" class="form-control rounded-pill px-3 py-2" @bind="NewCustomer.City" />
            </div>
            <div>
                <button type="button" class="btn btn-secondary rounded-pill px-4 py-2" @onclick="CloseAddCustomerModal"> <i class="fas fa-times-circle"></i> Cancel</button>
                <button type="button" class="btn btn-primary rounded-pill px-4 py-2" @onclick="AddCustomerAsync"><i class="fa-regular fa-floppy-disk"></i>Save</button>
            </div>
        </div>
    </div>
}

@if (isEditModalOpen)
{
    <div class="modal-backdrop" @onclick="CloseEditModal">
        <div class="modal" @onclick:stopPropagation>
            <h5>Edit Customer</h5>
            <div>
                <label for="CompanyName" class="form-label">Customer Name</label>
                <input type="text" id="CompanyName" class="form-control rounded-pill px-3 py-2" @bind="SelectedCustomer.CompanyName" />
            </div>
            <div>
                <label for="Email" class="form-label">Email</label>
                <input type="email" id="Email" class="form-control rounded-pill px-3 py-2" @bind="SelectedCustomer.Email" />
            </div>
            <div>
                <label for="Phone" class="form-label">Phone</label>
                <input type="text" id="Phone" class="form-control rounded-pill px-3 py-2" @bind="SelectedCustomer.Phone" />
            </div>
            <div>
                <label for="Address" class="form-label">Address</label>
                <input type="text" id="Address" class="form-control rounded-pill px-3 py-2" @bind="SelectedCustomer.Address" />
            </div>
            <div>
                <label for="City" class="form-label">City</label>
                <input type="text" id="City" class="form-control rounded-pill px-3 py-2" @bind="SelectedCustomer.City" />
            </div>
            <div>
                <label for="IsActive" class="form-label">Active</label>
                <input type="checkbox" id="IsActive" class="form-check-input rounded-pill" @bind="SelectedCustomer.IsActive" />
            </div>
            <div>
                <button type="button" class="btn btn-secondary rounded-pill px-4 py-2" @onclick="CloseEditModal"><i class="fas fa-times-circle"></i> Cancel</button>
                <button type="button" class="btn btn-primary rounded-pill px-4 py-2" @onclick="SaveChanges"><i class="fa-regular fa-floppy-disk"></i>Save</button>
            </div>
        </div>
    </div>
}


@code {
    private List<CustomerUI.Models.Customer> customers = new();
    private List<CustomerUI.Models.Customer> FilteredCustomers = new();
    private bool isLoading = true;
    private List<CustomerUI.Models.Customer> Customers = new();
    private CustomerUI.Models.Customer NewCustomer = new();
    private CustomerUI.Models.Customer SelectedCustomer = new();
    private bool IsAddCustomerModalOpen = false;
    private bool isEditModalOpen = false;

    private string CompanyNameFilter = string.Empty;
    private string EmailFilter = string.Empty;
    private string IsActiveFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("token");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
            return; // Evita di eseguire il resto del codice se il token non è valido
        }

        // Carica tutti i clienti
        customers = await CustomerService.GetCustomersAsync();
        FilteredCustomers = customers;
        isLoading = false;
    }

    private void ApplyFilters()
    {
        FilteredCustomers = customers
            .Where(c =>
                (string.IsNullOrEmpty(CompanyNameFilter) || c.CompanyName.Contains(CompanyNameFilter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(EmailFilter) || c.Email.Contains(EmailFilter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(IsActiveFilter) || c.IsActive.ToString().Equals(IsActiveFilter, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private void ClearFilters()
    {
        // Reset dei filtri
        CompanyNameFilter = string.Empty;
        EmailFilter = string.Empty;
        IsActiveFilter = string.Empty;

        // Ripristina la lista originale di clienti
        FilteredCustomers = customers;
    }

    // Apri la modal
    private void OpenAddCustomerModal()
    {
        NewCustomer = new CustomerUI.Models.Customer(); // Resetta il modello
        IsAddCustomerModalOpen = true;
    }

    // Chiudi la modal
    private void CloseAddCustomerModal()
    {
        IsAddCustomerModalOpen = false;
    }

    // Aggiungi il cliente
    private async Task AddCustomerAsync()
    {
        try
        {
            await CustomerService.AddCustomerAsync(NewCustomer);
            Customers.Add(NewCustomer); // Aggiorna la lista locale (opzionale)
            CloseAddCustomerModal();
            await RefreshCustomers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding customer: {ex.Message}");
        }
    }

    private async Task RefreshCustomers()
    {
        customers = await CustomerService.GetCustomersAsync();
        FilteredCustomers = customers;
        isLoading = false;
    }

    private async Task OnDeleteClicked(int customerId)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");

        if (confirmDelete)
        {
            try
            {
                await CustomerService.DeleteCustomerAsync(customerId);
                await RefreshCustomers(); // Aggiorna l'elenco
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    private void OpenEditModal(CustomerUI.Models.Customer customer)
    {
        SelectedCustomer = new CustomerUI.Models.Customer
        {
            CustomerId = customer.CustomerId,
            CompanyName = customer.CompanyName,
            Email = customer.Email,
            Phone = customer.Phone,
            Address = customer.Address,
            City = customer.City,
            IsActive = customer .IsActive
        };
        isEditModalOpen = true;
    }

    private void CloseEditModal()
    {
        SelectedCustomer = null;
        isEditModalOpen = false;
    }
    private async Task SaveChanges()
    {
        if (SelectedCustomer != null)
        {
            // Chiamata al servizio per salvare le modifiche
            await CustomerService.UpdateCustomerAsync(SelectedCustomer.CustomerId, SelectedCustomer);

            // Aggiorna l'elenco locale
            var customer = customers.FirstOrDefault(p => p.CustomerId == SelectedCustomer.CustomerId);
            if (customer != null)
            {
                customer.CustomerId = SelectedCustomer.CustomerId;
                customer.CompanyName = SelectedCustomer.CompanyName;
                customer.Email = SelectedCustomer.Email;
                customer.Phone = SelectedCustomer.Phone;
                customer.Address = SelectedCustomer.Address;
                customer.City = SelectedCustomer.City;
                customer.IsActive = SelectedCustomer.IsActive;
            }
        }

        CloseEditModal();
    }

    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Customers");

        worksheet.Cell(1, 1).Value = "Company Name";
        worksheet.Cell(1, 2).Value = "Email";
        worksheet.Cell(1, 3).Value = "Phone";
        worksheet.Cell(1, 4).Value = "Address";
        worksheet.Cell(1, 5).Value = "City";
        worksheet.Cell(1, 6).Value = "Active";

        int row = 2;
        foreach (var customer in FilteredCustomers)
        {
            worksheet.Cell(row, 1).Value = customer.CompanyName;
            worksheet.Cell(row, 2).Value = customer.Email;
            worksheet.Cell(row, 3).Value = customer.Phone;
            worksheet.Cell(row, 4).Value = customer.Address;
            worksheet.Cell(row, 5).Value = customer.City;
            worksheet.Cell(row, 6).Value = customer.IsActive ? "Yes" : "No";
            row++;
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Position = 0;

        var fileName = "Customers.xlsx";
        var fileBytes = stream.ToArray();
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, fileBytes);
    }

    private void NavigateToJourney(int customerId, string customerName)
    {
        NavigationManager.NavigateTo($"/Journey?customerId={customerId}&customerName={Uri.EscapeDataString(customerName)}");
    }
}

<script src="js/downloadHelper.js"></script>