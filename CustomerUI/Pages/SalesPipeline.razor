@page "/SalesPipeline"
@inject SalesPipelineService SalesPipelineService
@inject CustomerService CustomerService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@using CustomerUI.Services
@using Microsoft.AspNetCore.Components.Web

<style>
    /* Contenitore della board con scroll orizzontale */
    .kanban-container {
        display: flex;
        flex-direction: row;
        align-items: flex-start; /* Adatta l'altezza al contenuto */
        overflow-x: auto;
        padding-bottom: 10px; /* per non coprire la scrollbar */
    }

    .trello-column h5 {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        margin: 0;
        padding: 0 5px;
    }

    /* Stile per ciascuna colonna */
    .trello-column {
        display: inline-block; /* affianca le colonne */
        vertical-align: top;
        width: 280px; /* larghezza fissa, regolabile */
        padding: 10px;
        border-radius: 5px;
        min-height: 400px;
        margin-right: 10px; /* spazio fra le colonne */
    }

    .trello-column-red {
        background-color: #d3dbe9;
    }

    .trello-column-yellow {
        background-color: #d3dbe9;
    }

    .trello-column-blue {
        background-color: #d3dbe9;
    }

    .trello-column-green {
        background-color: #d3dbe9;
    }

    /* Stile per le card */
    .trello-card {
        width: 200px; /* o max-width se preferisci */
        background-color: #ffffff;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        cursor: move;
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: normal;
    }

    /* Dropdown filtro custom */
    .dropdown-menu {
        max-height: 300px;
        overflow-y: auto;
        position: absolute;
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        z-index: 1000;
    }
</style>

<div class="container">
    <h2 class="page-title">Sales Pipeline</h2>

    <!-- Dropdown filtro per Cliente (aperto/chiuso tramite toggle locale) -->
    <div class="mb-3" style="position: relative;">
        <button class="btn btn-primary rounded-pill px-3 py-2" @onclick="ToggleDropdown">
            Filtra per Cliente
        </button>
        @if (showDropdown)
        {
            <div class="dropdown-menu show p-3">
                @foreach (var customer in AvailableCustomers)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox"
                               @bind="customer.IsSelected"
                               @bind:after="ApplyFilter"
                               id="customer_@customer.CustomerId" />
                        <label class="form-check-label" for="customer_@customer.CustomerId">
                            @customer.CompanyName
                        </label>
                    </div>
                }
            </div>
        }
    </div>

    <div class="kanban-container">
        <!-- Colonna 1: Lead identificato -->
        <div class="trello-column trello-column-yellow"
             @ondrop="HandleDropLeadIdentificato"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Lead identificato</h5><br />
            @foreach (var card in LeadIdentificatoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <div @ondblclick="() => EditDescription(card)">
                                @card.Description
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 2: Proposta inviata -->
        <div class="trello-column trello-column-blue"
             @ondrop="HandleDropPropostaInviata"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Proposta inviata</h5><br />
            @foreach (var card in PropostaInviataCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <div @ondblclick="() => EditDescription(card)">
                                @card.Description
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 3: Negoziazione in corso -->
        <div class="trello-column trello-column-green"
             @ondrop="HandleDropNegoziazioneInCorso"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Negoziazione in corso</h5><br />
            @foreach (var card in NegoziazioneInCorsoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <div @ondblclick="() => EditDescription(card)">
                                @card.Description
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Colonna 4: Chiusura del contratto -->
        <div class="trello-column trello-column-red"
             @ondrop="HandleDropChiusuraContratto"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Chiusura del contratto</h5><br />
            @foreach (var card in ChiusuraContrattoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <div @ondblclick="() => EditDescription(card)">
                                @card.Description
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Modello della card con informazioni per filtro e drag & drop
    public class CardItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public int CustomerId { get; set; }
        public string CurrentStage { get; set; } = "";
    }

    // Lista master di tutte le card
    private List<CardItem> AllCards = new();

    // Liste per le colonne (filtrate in base al CurrentStage)
    private List<CardItem> LeadIdentificatoCards = new();
    private List<CardItem> PropostaInviataCards = new();
    private List<CardItem> NegoziazioneInCorsoCards = new();
    private List<CardItem> ChiusuraContrattoCards = new();

    // Variabili per drag & drop ed editing
    private CardItem? draggedCard;
    private CardItem? editingCard;

    // Modello per il filtro clienti
    public class FilterCustomerDto
    {
        public int CustomerId { get; set; }
        public string CompanyName { get; set; } = "";
        public bool IsSelected { get; set; }
    }
    private List<FilterCustomerDto> AvailableCustomers = new();

    // Flag per mostrare/nascondere il dropdown filtro
    private bool showDropdown = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("token");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Carica le pipeline
        var salesPipelineList = await SalesPipelineService.GetSalesPipelineAsync();
        if (salesPipelineList is not null)
        {
            foreach (var pipeline in salesPipelineList)
            {
                var customer = await CustomerService.GetCustomerByIdAsync(pipeline.CustomerId);
                var card = new CardItem
                    {
                        Id = pipeline.PipelineID,
                        Title = customer.CompanyName,
                        Description = pipeline.Notes ?? string.Empty,
                        CustomerId = pipeline.CustomerId,
                        CurrentStage = pipeline.CurrentStage
                    };
                AllCards.Add(card);
            }
        }

        // Carica i clienti per il filtro
        var customersFromService = await SalesPipelineService.GetCustomersFromSalesPipelineAsync();
        AvailableCustomers = customersFromService
            .Select(c => new FilterCustomerDto
                {
                    CustomerId = c.CustomerId,
                    CompanyName = c.CompanyName,
                    IsSelected = false
                })
            .ToList();

        ApplyFilter();
    }

    // Toggle per il dropdown filtro
    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }

    // Applica il filtro in base ai clienti selezionati
    private void ApplyFilter()
    {
        var selectedCustomerIds = AvailableCustomers
            .Where(c => c.IsSelected)
            .Select(c => c.CustomerId)
            .ToList();

        IEnumerable<CardItem> filtered = selectedCustomerIds.Any()
            ? AllCards.Where(card => selectedCustomerIds.Contains(card.CustomerId))
            : AllCards;

        LeadIdentificatoCards = filtered.Where(card => card.CurrentStage == "Lead identificato").ToList();
        PropostaInviataCards = filtered.Where(card => card.CurrentStage == "Proposta inviata").ToList();
        NegoziazioneInCorsoCards = filtered.Where(card => card.CurrentStage == "Negoziazione in corso").ToList();
        ChiusuraContrattoCards = filtered.Where(card => card.CurrentStage == "Chiusura del contratto").ToList();

        StateHasChanged();
    }

    // Gestione drag & drop
    private void OnDragStart(DragEventArgs e, CardItem card)
    {
        draggedCard = card;
    }

    private void OnDragOver(DragEventArgs e)
    {
        // Consente il drop
    }

    private async void OnDrop(string targetColumn)
    {
        if (draggedCard == null)
            return;

        string newStage = targetColumn switch
        {
            "Lead identificato" => "Lead identificato",
            "Proposta inviata" => "Proposta inviata",
            "Negoziazione in corso" => "Negoziazione in corso",
            "Chiusura del contratto" => "Chiusura del contratto",
            _ => draggedCard.CurrentStage
        };

        draggedCard.CurrentStage = newStage;
        await SalesPipelineService.UpdateSalesPipelineCurrentStageAsync(draggedCard.Id, newStage);
        draggedCard = null;
        ApplyFilter();
    }

    private void HandleDropLeadIdentificato(DragEventArgs e) => OnDrop("Lead identificato");
    private void HandleDropPropostaInviata(DragEventArgs e) => OnDrop("Proposta inviata");
    private void HandleDropNegoziazioneInCorso(DragEventArgs e) => OnDrop("Negoziazione in corso");
    private void HandleDropChiusuraContratto(DragEventArgs e) => OnDrop("Chiusura del contratto");

    // Gestione editing descrizione
    private void EditDescription(CardItem card)
    {
        editingCard = card;
    }

    private void CancelEditing()
    {
        editingCard = null;
    }

    private async Task SaveDescription(CardItem card)
    {
        await SalesPipelineService.UpdateSalesPipelineNoteAsync(card.Id, card.Description);
        editingCard = null;
        StateHasChanged();
    }
}
