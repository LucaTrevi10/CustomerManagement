@page "/SalesPipeline"
@inject SalesPipelineService SalesPipelineService
@inject CustomerService CustomerService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@using CustomerUI.Services
@using Microsoft.AspNetCore.Components.Web

<style>
    /* Contenitore della board con scroll orizzontale */
    .kanban-container {
        display: flex;
        flex-direction: row;
        align-items: flex-start; /* Permette al container di adattare la propria altezza in base al contenuto */
        overflow-x: auto;
        padding-bottom: 10px; /* per non coprire la scrollbar */
    }

    .trello-column h5 {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        margin: 0;
        padding: 0 5px;
    }

    /* Stile per ciascuna colonna */
    .trello-column {
        display: inline-block; /* affianca le colonne */
        vertical-align: top;
        width: 280px; /* larghezza fissa, regolabile */
        padding: 10px;
        border-radius: 5px;
        min-height: 400px;
        margin-right: 10px; /* spazio fra le colonne */
    }

    .trello-column-red {
        background-color: #d3dbe9;
    }

    .trello-column-yellow {
        background-color: #d3dbe9;
    }

    .trello-column-blue {
        background-color: #d3dbe9;
    }

    .trello-column-green {
        background-color: #d3dbe9;
    }

    /* Stile per le card */
    .trello-card {
        width: 200px; /* o max-width se preferisci */
        background-color: #ffffff;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        cursor: move;
        /* Proprietà fondamentali per il wrapping */
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: normal;
    }

</style>

<div class="container">
    <h2 class="page-title">Sales Pipeline</h2>
    <div class="kanban-container">
        <!-- Colonna 1: Lead identificato -->
        <div class="trello-column trello-column-yellow"
             @ondrop="HandleDropLeadIdentificato"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Lead identificato</h5><br />
            @foreach (var card in LeadIdentificatoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <!-- Modalità di editing: textarea e pulsanti -->
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <!-- Visualizzazione normale; doppio click per attivare l'editing -->
                            <div @ondblclick="() => EditDescription(card)">@card.Description</div>
                        }
                    </div>
                </div>
               @*  <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div> *@
            }
        </div>

        <!-- Colonna 2: Proposta inviata -->
        <div class="trello-column trello-column-blue"
             @ondrop="HandleDropPropostaInviata"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Proposta inviata</h5><br />
            @foreach (var card in PropostaInviataCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <div @ondblclick="() => EditDescription(card)">@card.Description</div>
                        }
                    </div>
                </div>
               @*  <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div> *@
            }
        </div>

        <!-- Colonna 3: Negoziazione in corso -->
        <div class="trello-column trello-column-green"
             @ondrop="HandleDropNegoziazioneInCorso"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Negoziazione in corso</h5><br />
            @foreach (var card in NegoziazioneInCorsoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <div @ondblclick="() => EditDescription(card)">@card.Description</div>
                        }
                    </div>
                </div>
               @*  <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div> *@
            }
        </div>

        <!-- Colonna 4: Chiusura del contratto -->
        <div class="trello-column trello-column-red"
             @ondrop="HandleDropChiusuraContratto"
             @ondragover="OnDragOver" @ondragover:preventDefault>
            <h5>Chiusura del contratto</h5><br />
            @foreach (var card in ChiusuraContrattoCards)
            {
                <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        @if (editingCard == card)
                        {
                            <textarea @bind="card.Description"></textarea>
                            <br />
                            <button @onclick="() => SaveDescription(card)">Salva</button>
                            <button @onclick="CancelEditing">Annulla</button>
                        }
                        else
                        {
                            <div @ondblclick="() => EditDescription(card)">@card.Description</div>
                        }
                    </div>
                </div>
                @* <div class="trello-card" draggable="true" @ondragstart="@(e => OnDragStart(e, card))">
                    <div style="padding:10px; word-wrap: break-word;">
                        <strong>@card.Title</strong>
                        <div>@card.Description</div>
                    </div>
                </div> *@
            }
        </div>
    </div>
</div>

@code {
    public class CardItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
    }

    // Liste per le colonne
    private List<CardItem> LeadIdentificatoCards = new();
    private List<CardItem> PropostaInviataCards = new();
    private List<CardItem> NegoziazioneInCorsoCards = new();
    private List<CardItem> ChiusuraContrattoCards = new();

    // Variabile per tracciare la card trascinata
    private CardItem? draggedCard;

    // Variabile per la card in modalità di editing
    private CardItem? editingCard;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("token");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
            return; // Evita di eseguire il resto del codice se il token non è valido
        }

        var salesPipelineList = await SalesPipelineService.GetSalesPipelineAsync();

        if (salesPipelineList is not null)
        {
            // Mappa ogni record in una CardItem, usando CustomerId come titolo e Notes come descrizione
            foreach (var pipeline in salesPipelineList)
            {
                // Chiamata per ottenere il customer; attenzione, questo viene eseguito in serie
                var customer = await CustomerService.GetCustomerByIdAsync(pipeline.CustomerId);

                var card = new CardItem
                    {
                        Id = pipeline.PipelineID,
                        Title = customer.CompanyName,  // Usa il CompanyName
                        Description = pipeline.Notes ?? string.Empty
                    };

                // Assegna la card alla colonna appropriata in base allo stato
                switch (pipeline.CurrentStage)
                {
                    case "Lead identificato":
                        LeadIdentificatoCards.Add(card);
                        break;
                    case "Proposta inviata":
                        PropostaInviataCards.Add(card);
                        break;
                    case "Negoziazione in corso":
                        NegoziazioneInCorsoCards.Add(card);
                        break;
                    case "Chiusura del contratto":
                        ChiusuraContrattoCards.Add(card);
                        break;
                }
            }
        }
    }

    private void OnDragStart(DragEventArgs e, CardItem card)
    {
        draggedCard = card;
    }

    private void OnDragOver(DragEventArgs e)
    {
        // Consente il drop
    }

    private void HandleDropLeadIdentificato(DragEventArgs e) => OnDrop("LeadIdentificato");
    private void HandleDropPropostaInviata(DragEventArgs e) => OnDrop("PropostaInviata");
    private void HandleDropNegoziazioneInCorso(DragEventArgs e) => OnDrop("NegoziazioneInCorso");
    private void HandleDropChiusuraContratto(DragEventArgs e) => OnDrop("ChiusuraContratto");

    private void OnDrop(string targetColumn)
    {
        if (draggedCard == null)
            return;

        // Rimuovi la card da tutte le colonne
        LeadIdentificatoCards.Remove(draggedCard);
        PropostaInviataCards.Remove(draggedCard);
        NegoziazioneInCorsoCards.Remove(draggedCard);
        ChiusuraContrattoCards.Remove(draggedCard);

        // Aggiungi la card alla colonna di destinazione
        switch (targetColumn)
        {
            case "LeadIdentificato":
                LeadIdentificatoCards.Add(draggedCard);
                break;
            case "PropostaInviata":
                PropostaInviataCards.Add(draggedCard);
                break;
            case "NegoziazioneInCorso":
                NegoziazioneInCorsoCards.Add(draggedCard);
                break;
            case "ChiusuraContratto":
                ChiusuraContrattoCards.Add(draggedCard);
                break;
        }

        draggedCard = null;
        StateHasChanged();
    }

    // Metodo per attivare la modalità di editing
    private void EditDescription(CardItem card)
    {
        editingCard = card;
    }

    // Metodo per annullare l'editing
    private void CancelEditing()
    {
        editingCard = null;
    }

    // Metodo per salvare la descrizione modificata
    private async Task SaveDescription(CardItem card)
    {
        // Chiama il servizio per aggiornare il campo Notes nel database
        // Assicurati che UpdateSalesPipelineNoteAsync sia implementato correttamente nel SalesPipelineService
        await SalesPipelineService.UpdateSalesPipelineNoteAsync(card.Id, card.Description);
        editingCard = null;
        StateHasChanged();
    }
}
